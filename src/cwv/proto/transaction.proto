syntax = "proto3";

package org.brewchain.core.model;

message TransactionInfo {
	bytes hash = 1;
	TransactionBody body = 2;
	bytes signature = 3;
	TransactionStatus status = 4;
	TransactionNode node = 5;
}

message TransactionBody {
	int32 nonce = 1;
	bytes address = 2;
	repeated TransactionOutput outputs = 3;
	// bytes fee = 4;
	TransactionData data = 5;
	bytes exdata = 6;
	int64 timestamp = 7;
}

message TransactionOutput {
	bytes address = 1;
	bytes amount = 2;
	bytes token = 3;
	bytes tokenAmount = 4;
	bytes symbol = 5;
	repeated bytes cryptoToken = 6;
}

message TransactionNode {
	string nid = 1;
	bytes address = 2;
}

message TransactionStatus {
	bytes status = 1;
	bytes result = 2;
	bytes hash = 3;
	int64 height = 4;
	int64 timestamp = 5;
}

//message BroadcastTransactionMsg {
//	repeated bytes txHash = 1;
//	repeated bytes txDatas = 2;
//}

message TransactionData {
	DataType type = 1;
	UnionAccountData unionAccountData = 10;
	UnionAccountTransferData unionAccountTransferData = 11;
	UnionAccountConfirmData unionAccountConfirmData = 12;
	PublicCryptoTokenData cryptoTokenData = 20;
	OwnerTokenData ownerTokenData = 30;
	UserTokenData userTokenData = 31;
	PublicContractData publicContractData = 40;
	CallContractData callContractData = 41;
	EVFSReqFileUploadData reqFileUploadData = 42;
	EVFSAuthoriseFileOPData authoriseFileOPData = 43;
	EVFSConfirmFileUploadData confirmFileUploadData = 44;
	
//	// FIXME 这是为测试准备的，不要发布到生产环境
//	WhiteListData whiteListData = 50;
}
enum DataType {
	NONE = 0;
	PUBLICCRYPTOTOKEN = 1;
	OWNERTOKEN = 2;
	USERTOKEN = 3;
	PUBLICCONTRACT = 4;
	CALLCONTRACT = 5;
	CREATEUNIONACCOUNT = 6;
	PUBLICUNIONACCOUNT = 7;
	UNIONACCOUNTTRANSFER = 8;
	UNIONACCOUNTCONFIRM = 9;
	UNIONACCOUNTMANAGE = 10;
	EVFSREQFILEUPLOAD = 11;//文件上传申请
	EVFSAUTHORISEFILEOP = 12;//文件访问授权
	EVFSCONFIRMFILEUPLOAD = 13;//文件上传确认
//	    
//	    // FIXME 这是为测试准备的，不要发布到生产环境
//	    WHITELIST = 10;
}
//	// FIXME 这是为测试准备的，不要发布到生产环境
//	message WhiteListData {
//		repeated string addrs = 1;
//		repeated int32 status = 2;
//	}
message PublicCryptoTokenData {
	int64 total = 1;
	bytes symbol = 2;
	repeated string name = 3;
	repeated string code = 4;
	repeated PublicCryptoTokenDataProp prop = 5;
	bytes toAddress = 6;
}
message PublicCryptoTokenDataProp {
	repeated string key = 1;
	repeated string value = 2;
}


message OwnerTokenData {
	bytes token = 1;
	bytes amount = 2;
	OwnerTokenOpCode opCode = 3;
	enum OwnerTokenOpCode {
		PUBLIC = 0;
		BURN = 1;
		MINT = 2;
	}
}
message UserTokenData {
	bytes token = 1;
	bytes address = 2;
	bytes amount = 3;
	UserTokenOpCode opCode = 4;
	enum UserTokenOpCode {
		FREEZE = 0;
		UNFREEZE = 1;
		LOCK = 2;
		UNLOCK = 3;
	}
}
message PublicContractData {
	bytes data = 1;
	bytes code = 2;
	bytes amount = 3;
}
message CallContractData {
	bytes data = 1;
	bytes contract = 2;
	bytes amount = 3;
}
message UnionAccountData {
	bytes max = 1;
	bytes acceptMax = 2;
	int32 acceptLimit = 3;
	repeated bytes address = 4;
}
message UnionAccountTransferData {
	bytes fromSubAccount = 1;
}
message UnionAccountConfirmData {
	bytes hash = 1;
	bytes fromSubAccount = 2;
}
message EVFSReqFileUploadData{
	bytes encFileInfo = 1;//使用randomKey des加密的fileInfo信息
	bytes desKey = 2;//chainkey加密的randomKey，hexStringBytes
	string CKVersion = 3;//chainkey 的version
	
	message FileInfoData{
		int32  	fileSize = 1;	//文件大小
		string 	filename = 2;//文件名
		string 	fileDesc = 3;//文件描述
		string	domain = 4;//文件所属域
		string	symbol721c = 5;// 721token的名称
		int32	repeatCount = 6;//备份个数
		int32 	sliceCount = 7;//分片数量
		int64	totalVolumeCount = 8;//该文件一共有多少个721V
		int64	storeDeadLine = 9;//存储时间限制
		int64	onChainDeadLine=10;//上链时间限制
		string	fileSign = 11;//文件内容MD5
		bytes   exData = 12;//附加信息
		repeated bytes nodeUrls = 13;//存储节点列表
		bool    compress = 14;//是否开启压缩
	}
}

message EVFSAuthoriseFileOPData{
	bytes fileHash = 1;//
	repeated bytes addAddrs = 2;//添加授权地址列表
	repeated bytes removeAddrs = 3;//移除授权地址列表
}

message EVFSConfirmFileUploadData{
	bytes encFileInfo = 1;//使用randomKey des加密的fileInfo信息
	bytes fileHash = 2;//文件hash
}

message UnionAccountManageData {
	bytes max = 1;
	bytes acceptMax = 2;
	int32 acceptLimit = 3;
	repeated bytes appendAddrs = 4;
	repeated bytes removeAddrs = 5;
}